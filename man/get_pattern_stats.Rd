% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pattern-stats.R
\name{get_pattern_stats}
\alias{get_pattern_stats}
\title{Gather statistics for dictionary patterns}
\usage{
get_pattern_stats(
  text,
  patterns,
  at_level = "sentences",
  glob = FALSE,
  ignore_case = TRUE,
  optimize_regex = TRUE
)
}
\arguments{
\item{text}{A quanteda corpus object or something that can be transformed to
a corpus by quanteda::corpus(), for example, a simple character vector.}

\item{patterns}{A character vector where each element is a pattern or a
quanteda dictionary object. Patterns are expected to be regular expressions
(if glob parameter is not set) or only include glob-style wildcars (if glob
parameter is set to TRUE).}

\item{at_level}{At which level should patterns be applied. Possible values
are "documents", "sentences", or "paragraphs". Defaults to "sentences".}

\item{glob}{Do the provided patterns use glob-style wildcards instead of
regular expressions? Defaults to FALSE.}

\item{ignore_case}{Should the case be ignored when searching for pattern
matches? Defaults to TRUE.}

\item{optimize_regex}{Should the regular expressions be optimized to allow
for quicker lookups (see regexhelpeR package)? Defaults to TRUE.}
}
\value{
A data frame containing a row for each pattern. It includes the
provided pattern (\code{original_pattern}). The version after pattern
transformations (e.g., switch from glob to regex, optimizations) were applied
(= the version which was actually tested; \code{applied_pattern}), the
\code{match_count}, and the \code{lookup_time}.
}
\description{
For a list of (possibly multi-word) patterns statistics are
generated. Basically the number of matches and the time to run the pattern
on the whole corpus are recorded. By default, patterns are applied at the
sentence level. Thus, the match_count is the total count of sentences where
the pattern was detected.

The function works with quanteda corpus objects and regular texts (character
vectors; in general text that can be transformed to a quanteda corpus object
by quanteda's corpus() function should work). It expects regular expression
patterns but can work with glob expressions as well (if parameter glob is
set, internally the patterns are transformed to regular expressions).
}
