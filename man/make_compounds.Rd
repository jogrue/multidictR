% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make-compounds.R
\name{make_compounds}
\alias{make_compounds}
\title{Create compounds for complex patterns}
\usage{
make_compounds(
  text,
  patterns,
  wordsep = " ",
  concatenator = "_",
  at_level = "sentences",
  glob = FALSE,
  lazy = TRUE,
  ignore_case = TRUE,
  optimize_regex = TRUE
)
}
\arguments{
\item{text}{A quanteda corpus object or something that can be transformed to
a corpus by quanteda::corpus(), for example, a simple character vector}

\item{patterns}{A character vector where each element is a pattern or a
quanteda dictionary object. Patterns are expected to be regular expressions
(if glob parameter is not set) or only include glob-style wildcards (if glob
parameter is set to TRUE).}

\item{wordsep}{The word seperator, usually simply a space. Defaults to " ".}

\item{concatenator}{The character for creating multi-word compounds, defaults
to "_".}

\item{at_level}{At which level should patterns be applied. Possible values
are "documents", "sentences", or "paragraphs". Defaults to "sentences".}

\item{glob}{Do the provided patterns use glob-style wildcards instead of
regular expressions? Defaults to FALSE.}

\item{lazy}{Should regular expressions be transformed to lazy versions?
Defaults to TRUE to return the shortest possible compounds.}

\item{ignore_case}{Should the case be ignored when searching for pattern
matches? Defaults to TRUE.}

\item{optimize_regex}{Should the regular expressions be optimized to allow
for quicker lookups (see regexhelpeR package)? Defaults to TRUE.}
}
\value{
The corpus or text object where matched multi-word terms are now
replaced by multi-word compounds.
}
\description{
For a list of (multi-word) patterns compounds are created. The
function works with quanteda corpus objects and regular texts (character
vectors; in general text that can be transformed to a quanteda corpus object
by quanteda's corpus() function should work). It expects regular expression
patterns but can work with glob expressions as well (if parameter glob is
set, internally the patterns are transformed to regular expressions).
quanteda has built-in functionality for this; however, it does not
allow for patterns which include wildcards that stand for multiple words.
For example, something like "the * people" could capture "the honest
people", "the hard-working, common people", or "the singer sings songs about
people". Such patterns would not work as expected in quanteda. With regular
expressions, a lot more sophisticated patterns become possible.
}
